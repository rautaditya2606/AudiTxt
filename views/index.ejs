<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio to Text Converter</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Additional CSS for the footer */
        footer {
            background-color: #2c3e50;
            color: white;
            padding: 30px 0;
            margin-top: 50px;
            text-align: center;
        }
        
        .footer-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .logo {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 20px;
            color: #3498db;
        }
        
        .social-links {
            display: flex;
            gap: 20px;
            margin-top: 15px;
        }
        
        .social-links a {
            color: white;
            font-size: 1.5rem;
            transition: color 0.3s;
        }
        
        .social-links a:hover {
            color: #3498db;
        }
        
        .copyright {
            margin-top: 20px;
            font-size: 0.9rem;
            color: #bdc3c7;
        }

        /* New styles for microphone recording */
        .recording-section {
            margin-top: 30px;
            padding: 20px;
            border-radius: 8px;
            background-color: #f8f9fa;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .recording-controls {
            display: flex;
            gap: 15px;
            margin-top: 15px;
            justify-content: center;
        }

        .recording-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        #startRecording {
            background-color: #e74c3c;
            color: white;
        }

        #stopRecording {
            background-color: #2c3e50;
            color: white;
            display: none;
        }

        #submitRecording {
            background-color: #3498db;
            color: white;
            display: none;
        }

        .recording-status {
            margin-top: 15px;
            text-align: center;
            font-style: italic;
            color: #7f8c8d;
        }

        .visualizer {
            width: 100%;
            height: 60px;
            margin: 15px 0;
            background-color: #ecf0f1;
            border-radius: 5px;
            overflow: hidden;
            display: none;
        }

        .copy-btn {
            margin-top: 15px;
            padding: 8px 15px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .copy-btn:hover {
            background-color: #27ae60;
        }

        .audio-player {
            width: 100%;
            margin-top: 15px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Audio to Text Converter</h1>
        <div class="supported-formats">
            <h3>Supported File Formats : Audio and Video</h3>
            <p><strong>Note:</strong> Maximum file size: <b>150MB</b></p>
        </div>
        
        <!-- File Upload Section -->
        <div class="file-input-container">
            <form id="uploadForm">
                <input type="file" id="audioFile" accept="audio/*,video/*" required>
                <button type="submit">Convert to Text âœ¨</button>
            </form>
        </div>
        
        <!-- Microphone Recording Section -->
        <div class="recording-section">
            <h3>Or record from microphone</h3>
            <div class="visualizer" id="visualizer"></div>
            <div class="recording-controls">
                <button id="startRecording" class="recording-btn">
                    <i class="fas fa-microphone"></i> Start Recording
                </button>
                <button id="stopRecording" class="recording-btn">
                    <i class="fas fa-stop"></i> Stop Recording
                </button>
                <button id="submitRecording" class="recording-btn">
                    <i class="fas fa-paper-plane"></i> Transcribe
                </button>
            </div>
            <div class="recording-status" id="recordingStatus">Ready to record</div>
            <audio class="audio-player" id="recordedAudio" controls></audio>
        </div>
        
        <div id="result"></div>
        <div class="loading">
            <img src="https://i.pinimg.com/originals/8d/d3/ed/8dd3ed839851364b5653440ee4a6a5a9.gif" alt="Converting...">
        </div>
    </div>
    <script>
        // File upload functionality
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const file = document.getElementById('audioFile').files[0];
            const resultDiv = document.getElementById('result');
            const loading = document.querySelector('.loading');

            // Remove existing copy button if any
            const existingCopyBtn = resultDiv.querySelector('.copy-btn');
            if (existingCopyBtn) {
                existingCopyBtn.remove();
            }

            if (file.size > 150 * 1024 * 1024) {
                resultDiv.textContent = 'File size must be less than 150MB';
                return;
            }

            if (!file.type.match('audio.*') && !file.type.match('video.*')) {
                resultDiv.textContent = 'Please upload only audio or video files';
                return;
            }

            const formData = new FormData();
            formData.append('audio', file);
            loading.style.display = 'block';
            resultDiv.textContent = '';

            try {
                const response = await fetch('/transcribe', {
                    method: 'POST',
                    body: formData
                });
                const data = await response.json();
                if (data.error) {
                    throw new Error(data.details || data.error);
                }
                resultDiv.textContent = data.transcription;
                
                // Add copy button if there's text
                if (data.transcription) {
                    const copyBtn = document.createElement('button');
                    copyBtn.className = 'copy-btn';
                    copyBtn.textContent = 'Copy';
                    copyBtn.onclick = () => {
                        navigator.clipboard.writeText(data.transcription);
                        copyBtn.textContent = 'Copied!';
                        setTimeout(() => copyBtn.textContent = 'Copy', 2000);
                    };
                    resultDiv.appendChild(copyBtn);
                    copyBtn.style.display = 'block';
                }
            } catch (error) {
                console.error('Error:', error);
                resultDiv.textContent = `Error: ${error.message}`;
            } finally {
                loading.style.display = 'none';
            }
        });

        // Microphone recording functionality
        const startBtn = document.getElementById('startRecording');
        const stopBtn = document.getElementById('stopRecording');
        const submitBtn = document.getElementById('submitRecording');
        const status = document.getElementById('recordingStatus');
        const audioPlayer = document.getElementById('recordedAudio');
        const visualizer = document.getElementById('visualizer');
        
        let mediaRecorder;
        let audioChunks = [];
        let audioContext;
        let analyser;
        let dataArray;
        let animationId;

        // Check for microphone support
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            document.querySelector('.recording-section').innerHTML = 
                '<p>Microphone recording is not supported in your browser.</p>';
        } else {
            startBtn.addEventListener('click', startRecording);
            stopBtn.addEventListener('click', stopRecording);
            submitBtn.addEventListener('click', submitRecording);
        }

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                
                // Set up audio visualization
                setupVisualizer(stream);
                
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };
                
                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    audioPlayer.src = URL.createObjectURL(audioBlob);
                    audioPlayer.style.display = 'block';
                    submitBtn.style.display = 'inline-flex';
                    status.textContent = 'Recording stopped. Ready to transcribe.';
                    stopVisualizer();
                };
                
                audioChunks = [];
                mediaRecorder.start(100); // Collect data every 100ms
                startBtn.style.display = 'none';
                stopBtn.style.display = 'inline-flex';
                visualizer.style.display = 'block';
                status.textContent = 'Recording... Speak now.';
            } catch (error) {
                console.error('Error accessing microphone:', error);
                status.textContent = 'Error accessing microphone: ' + error.message;
            }
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
                stopBtn.style.display = 'none';
                startBtn.style.display = 'inline-flex';
                
                // Stop all tracks in the stream
                mediaRecorder.stream.getTracks().forEach(track => track.stop());
            }
        }

        async function submitRecording() {
            if (audioChunks.length === 0) {
                status.textContent = 'No recording available to transcribe';
                return;
            }
            
            const resultDiv = document.getElementById('result');
            const loading = document.querySelector('.loading');
            
            // Remove existing copy button if any
            const existingCopyBtn = resultDiv.querySelector('.copy-btn');
            if (existingCopyBtn) {
                existingCopyBtn.remove();
            }
            
            status.textContent = 'Processing recording...';
            loading.style.display = 'block';
            resultDiv.textContent = '';

            try {
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                const reader = new FileReader();
                
                reader.onload = async () => {
                    const audioData = reader.result; // base64 string
                    
                    const response = await fetch('/transcribe-stream', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ audio: audioData })
                    });
                    
                    const data = await response.json();
                    
                    if (data.error) {
                        throw new Error(data.details || data.error);
                    }
                    
                    resultDiv.textContent = data.transcription;
                    status.textContent = 'Transcription complete!';
                    
                    // Add copy button if there's text
                    if (data.transcription) {
                        const copyBtn = document.createElement('button');
                        copyBtn.className = 'copy-btn';
                        copyBtn.textContent = 'Copy';
                        copyBtn.onclick = () => {
                            navigator.clipboard.writeText(data.transcription);
                            copyBtn.textContent = 'Copied!';
                            setTimeout(() => copyBtn.textContent = 'Copy', 2000);
                        };
                        resultDiv.appendChild(copyBtn);
                        copyBtn.style.display = 'block';
                    }
                };
                
                reader.readAsDataURL(audioBlob);
            } catch (error) {
                console.error('Error:', error);
                resultDiv.textContent = `Error: ${error.message}`;
                status.textContent = 'Error during transcription';
            } finally {
                loading.style.display = 'none';
            }
        }

        function setupVisualizer(stream) {
            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            const source = audioContext.createMediaStreamSource(stream);
            source.connect(analyser);
            analyser.fftSize = 64;
            
            const bufferLength = analyser.frequencyBinCount;
            dataArray = new Uint8Array(bufferLength);
            
            drawVisualizer();
        }

        function drawVisualizer() {
            animationId = requestAnimationFrame(drawVisualizer);
            analyser.getByteFrequencyData(dataArray);
            
            const width = visualizer.offsetWidth;
            const height = visualizer.offsetHeight;
            const barWidth = (width / dataArray.length) * 2.5;
            let x = 0;
            
            const canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, width, height);
            
            for (let i = 0; i < dataArray.length; i++) {
                const barHeight = (dataArray[i] / 255) * height;
                const hue = i * 360 / dataArray.length;
                
                ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;
                ctx.fillRect(x, height - barHeight, barWidth, barHeight);
                
                x += barWidth + 1;
            }
            
            visualizer.innerHTML = '';
            visualizer.appendChild(canvas);
        }

        function stopVisualizer() {
            cancelAnimationFrame(animationId);
            visualizer.innerHTML = '';
            visualizer.style.display = 'none';
            
            if (audioContext) {
                audioContext.close();
            }
        }
    </script>
</body>
</html>