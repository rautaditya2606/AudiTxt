<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio to Text Converter - Enhanced</title>
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        /* Dark mode styles */
        [data-theme="dark"] {
            --bg-primary: #1a1a1a;
            --bg-secondary: #2d2d2d;
            --text-primary: #ffffff;
            --text-secondary: #b0b0b0;
            --border-color: #404040;
            --shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        [data-theme="dark"] body {
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
        }

        [data-theme="dark"] .container {
            background: var(--bg-secondary);
            color: var(--text-primary);
        }

        [data-theme="dark"] #result {
            background: var(--bg-primary);
            color: var(--text-primary);
        }

        /* Enhanced UI Components */
        .header-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .theme-toggle {
            background: none;
            border: 2px solid #007bff;
            color: #007bff;
            padding: 8px 12px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .theme-toggle:hover {
            background: #007bff;
            color: white;
        }

        .transcription-modes {
            display: flex;
            gap: 1rem;
            margin: 1rem 0;
            flex-wrap: wrap;
        }

        .mode-btn {
            padding: 8px 16px;
            border: 2px solid #007bff;
            background: white;
            color: #007bff;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .mode-btn.active {
            background: #007bff;
            color: white;
        }

        .export-controls {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .export-btn {
            padding: 6px 12px;
            background: #28a745;
            color: white;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s;
        }

        .export-btn:hover {
            background: #218838;
            transform: translateY(-1px);
        }

        .history-panel {
            margin-top: 2rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 12px;
            display: none;
        }

        [data-theme="dark"] .history-panel {
            background: var(--bg-primary);
        }

        .history-item {
            padding: 0.5rem;
            margin: 0.5rem 0;
            background: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            border-left: 4px solid #007bff;
        }

        [data-theme="dark"] .history-item {
            background: var(--bg-secondary);
        }

        .history-item:hover {
            transform: translateX(5px);
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .confidence-indicator {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8rem;
            margin-left: 10px;
        }

        .confidence-high { background: #d4edda; color: #155724; }
        .confidence-medium { background: #fff3cd; color: #856404; }
        .confidence-low { background: #f8d7da; color: #721c24; }

        [data-theme="dark"] .confidence-high { background: #1e4d2b; color: #d4edda; }
        [data-theme="dark"] .confidence-medium { background: #4d3c00; color: #fff3cd; }
        [data-theme="dark"] .confidence-low { background: #4d1c24; color: #f8d7da; }

        .summary-box {
            background: #e3f2fd;
            border-left: 4px solid #2196f3;
            padding: 1rem;
            margin: 1rem 0;
            border-radius: 8px;
        }

        [data-theme="dark"] .summary-box {
            background: #1a3a4d;
            border-left-color: #64b5f6;
        }

        .real-time-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            background: #28a745;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .keyboard-shortcuts {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 1rem;
            border-radius: 8px;
            font-size: 0.9rem;
            display: none;
            z-index: 1000;
        }

        .shortcut {
            margin: 0.5rem 0;
        }

        .shortcut kbd {
            background: #333;
            padding: 2px 6px;
            border-radius: 4px;
            margin: 0 4px;
        }

        /* Enhanced recording controls */
        .recording-controls {
            display: flex;
            gap: 15px;
            margin-top: 15px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .recording-btn {
            padding: 12px 24px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 120px;
            justify-content: center;
        }

        #startRecording {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
        }

        #stopRecording {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            display: none;
        }

        #submitRecording {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
            display: none;
        }

        .recording-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        /* Progress bar */
        .progress-container {
            width: 100%;
            background: #f0f0f0;
            border-radius: 10px;
            margin: 1rem 0;
            overflow: hidden;
            display: none;
        }

        .progress-bar {
            height: 6px;
            background: linear-gradient(90deg, #007bff, #00d4ff);
            border-radius: 10px;
            transition: width 0.3s ease;
            width: 0%;
        }

        /* Enhanced file input */
        .file-input-container {
            position: relative;
            margin: 2rem 0;
            padding: 2rem;
            border: 2px dashed #007bff;
            border-radius: 12px;
            background: rgba(0,123,255,0.05);
            transition: all 0.3s;
        }

        .file-input-container:hover {
            border-color: #0056b3;
            background: rgba(0,123,255,0.1);
        }

        .file-input-container.dragover {
            border-color: #28a745;
            background: rgba(40,167,69,0.1);
        }

        /* Responsive improvements */
        @media (max-width: 768px) {
            .header-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .transcription-modes {
                justify-content: center;
            }
            
            .export-controls {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header-controls">
            <h1><i class="fas fa-microphone-alt"></i> Audio to Text Converter</h1>
            <button class="theme-toggle" onclick="toggleTheme()">
                <i class="fas fa-moon"></i> <span id="theme-text">Dark Mode</span>
            </button>
        </div>

        <div class="supported-formats">
            <h3><i class="fas fa-info-circle"></i> Supported Formats</h3>
            <p><strong>Audio:</strong> MP3, WAV, M4A, FLAC, OGG</p>
            <p><strong>Video:</strong> MP4, AVI, MOV, MKV</p>
            <p><strong>Language:</strong> English (with AI-powered summarization)</p>
            <p><strong>Note:</strong> Maximum file size: <b>150MB</b></p>
        </div>

        <!-- Transcription Modes -->
        <div class="transcription-modes">
            <button class="mode-btn active" data-mode="file">
                <i class="fas fa-file-upload"></i> File Upload
            </button>
            <button class="mode-btn" data-mode="record">
                <i class="fas fa-microphone"></i> Record Audio
            </button>
        </div>

        <!-- File Upload Section -->
        <div id="fileSection" class="file-input-container">
            <form id="uploadForm">
                <input type="file" id="audioFile" accept="audio/*,video/*" required>
                <button type="submit">
                    <i class="fas fa-magic"></i> Convert to Text
                </button>
            </form>
        </div>

        <!-- Microphone Recording Section -->
        <div id="recordSection" class="recording-section" style="display: none;">
            <h3><i class="fas fa-microphone"></i> Record from Microphone</h3>
            <div class="visualizer" id="visualizer"></div>
            <div class="recording-controls">
                <button id="startRecording" class="recording-btn">
                    <i class="fas fa-microphone"></i> Start Recording
                </button>
                <button id="stopRecording" class="recording-btn">
                    <i class="fas fa-stop"></i> Stop Recording
                </button>
                <button id="submitRecording" class="recording-btn">
                    <i class="fas fa-paper-plane"></i> Transcribe
                </button>
            </div>
            <div class="recording-status" id="recordingStatus">Ready to record</div>
            <audio class="audio-player" id="recordedAudio" controls></audio>
        </div>


        <!-- Progress Bar -->
        <div class="progress-container" id="progressContainer">
            <div class="progress-bar" id="progressBar"></div>
        </div>

        <!-- Results Section -->
        <div id="result"></div>
        
        <!-- Export Controls -->
        <div class="export-controls" id="exportControls" style="display: none;">
            <button class="export-btn" onclick="exportTranscription('txt')">
                <i class="fas fa-file-alt"></i> Export TXT
            </button>
            <button class="export-btn" onclick="exportTranscription('json')">
                <i class="fas fa-file-code"></i> Export JSON
            </button>
            <button class="export-btn" onclick="exportTranscription('html')">
                <i class="fas fa-file-code"></i> Export HTML
            </button>
        </div>

        <!-- History Panel -->
        <div class="history-panel" id="historyPanel">
            <h3><i class="fas fa-history"></i> Recent Transcriptions</h3>
            <div id="historyList"></div>
        </div>

        <div class="loading">
            <img src="https://i.pinimg.com/originals/8d/d3/ed/8dd3ed839851364b5653440ee4a6a5a9.gif" alt="Converting...">
        </div>
    </div>

    <!-- Keyboard Shortcuts Help -->
    <div class="keyboard-shortcuts" id="shortcutsHelp">
        <h4><i class="fas fa-keyboard"></i> Keyboard Shortcuts</h4>
        <div class="shortcut"><kbd>Ctrl</kbd> + <kbd>U</kbd> - Upload file</div>
        <div class="shortcut"><kbd>Ctrl</kbd> + <kbd>R</kbd> - Start recording</div>
        <div class="shortcut"><kbd>Ctrl</kbd> + <kbd>S</kbd> - Stop recording</div>
        <div class="shortcut"><kbd>Ctrl</kbd> + <kbd>C</kbd> - Copy transcription</div>
        <div class="shortcut"><kbd>Ctrl</kbd> + <kbd>H</kbd> - Toggle history</div>
        <div class="shortcut"><kbd>Ctrl</kbd> + <kbd>D</kbd> - Toggle dark mode</div>
        <div class="shortcut"><kbd>?</kbd> - Show/hide shortcuts</div>
    </div>

    <script>
        // Global variables
        let currentTranscription = '';
        let currentMode = 'file';
        let isDarkMode = false;
        let transcriptionHistory = JSON.parse(localStorage.getItem('transcriptionHistory') || '[]');
        
        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
            loadHistory();
            setupKeyboardShortcuts();
        });

        function initializeApp() {
            // Load theme preference
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                toggleTheme();
            }
            
            // Setup mode switching
            document.querySelectorAll('.mode-btn').forEach(btn => {
                btn.addEventListener('click', () => switchMode(btn.dataset.mode));
            });
            
            // Setup file upload
            setupFileUpload();
            
            // Setup recording
            setupRecording();
            
            // Setup real-time
            setupRealtime();
        }

        function switchMode(mode) {
            currentMode = mode;
            
            // Update active button
            document.querySelectorAll('.mode-btn').forEach(btn => {
                btn.classList.toggle('active', btn.dataset.mode === mode);
            });
            
            // Show/hide sections
            document.getElementById('fileSection').style.display = mode === 'file' ? 'block' : 'none';
            document.getElementById('recordSection').style.display = mode === 'record' ? 'block' : 'none';
            document.getElementById('realtimeSection').style.display = mode === 'realtime' ? 'block' : 'none';
        }

        function toggleTheme() {
            isDarkMode = !isDarkMode;
            document.documentElement.setAttribute('data-theme', isDarkMode ? 'dark' : 'light');
            document.getElementById('theme-text').textContent = isDarkMode ? 'Light Mode' : 'Dark Mode';
            document.querySelector('.theme-toggle i').className = isDarkMode ? 'fas fa-sun' : 'fas fa-moon';
            localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
        }

        function setupFileUpload() {
            const form = document.getElementById('uploadForm');
            const fileInput = document.getElementById('audioFile');
            
            // Drag and drop functionality
            const container = document.querySelector('.file-input-container');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                container.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                container.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                container.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight(e) {
                container.classList.add('dragover');
            }
            
            function unhighlight(e) {
                container.classList.remove('dragover');
            }
            
            container.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                fileInput.files = files;
            }
            
            form.addEventListener('submit', handleFileUpload);
        }

        async function handleFileUpload(e) {
            e.preventDefault();
            const file = document.getElementById('audioFile').files[0];
            
            if (!file) {
                showError('Please select a file');
                return;
            }

            if (file.size > 150 * 1024 * 1024) {
                showError('File size must be less than 150MB');
                return;
            }

            if (!file.type.match('audio.*') && !file.type.match('video.*')) {
                showError('Please upload only audio or video files');
                return;
            }

            showProgress();
            const formData = new FormData();
            formData.append('audio', file);

            try {
                const response = await fetch('/transcribe', {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.error) {
                    throw new Error(data.details || data.error);
                }
                
                displayResults(data);
                addToHistory(data.transcription, 'File Upload');
                
            } catch (error) {
                showError(`Error: ${error.message}`);
            } finally {
                hideProgress();
            }
        }

        function setupRecording() {
            const startBtn = document.getElementById('startRecording');
            const stopBtn = document.getElementById('stopRecording');
            const submitBtn = document.getElementById('submitRecording');
            const status = document.getElementById('recordingStatus');
            const audioPlayer = document.getElementById('recordedAudio');
            const visualizer = document.getElementById('visualizer');
            
            let mediaRecorder;
            let audioChunks = [];
            let audioContext;
            let analyser;
            let dataArray;
            let animationId;

            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                document.getElementById('recordSection').innerHTML = 
                    '<p>Microphone recording is not supported in your browser.</p>';
                return;
            }

            startBtn.addEventListener('click', startRecording);
            stopBtn.addEventListener('click', stopRecording);
            submitBtn.addEventListener('click', submitRecording);

            async function startRecording() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    mediaRecorder = new MediaRecorder(stream);
                    
                    setupVisualizer(stream);
                    
                    mediaRecorder.ondataavailable = (event) => {
                        if (event.data.size > 0) {
                            audioChunks.push(event.data);
                        }
                    };
                    
                    mediaRecorder.onstop = () => {
                        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                        audioPlayer.src = URL.createObjectURL(audioBlob);
                        audioPlayer.style.display = 'block';
                        submitBtn.style.display = 'inline-flex';
                        status.textContent = 'Recording stopped. Ready to transcribe.';
                        stopVisualizer();
                    };
                    
                    audioChunks = [];
                    mediaRecorder.start(100);
                    startBtn.style.display = 'none';
                    stopBtn.style.display = 'inline-flex';
                    visualizer.style.display = 'block';
                    status.textContent = 'Recording... Speak now.';
                } catch (error) {
                    showError('Error accessing microphone: ' + error.message);
                }
            }

            function stopRecording() {
                if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                    mediaRecorder.stop();
                    stopBtn.style.display = 'none';
                    startBtn.style.display = 'inline-flex';
                    mediaRecorder.stream.getTracks().forEach(track => track.stop());
                }
            }

            async function submitRecording() {
                if (audioChunks.length === 0) {
                    showError('No recording available to transcribe');
                    return;
                }
                
                showProgress();
                status.textContent = 'Processing recording...';

                try {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    const reader = new FileReader();
                    
                    reader.onload = async () => {
                        const audioData = reader.result;
                        
                        const response = await fetch('/transcribe-stream', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ audio: audioData })
                        });
                        
                        const data = await response.json();
                        
                        if (data.error) {
                            throw new Error(data.details || data.error);
                        }
                        
                        displayResults(data);
                        addToHistory(data.transcription, 'Microphone Recording');
                        status.textContent = 'Transcription complete!';
                    };
                    
                    reader.readAsDataURL(audioBlob);
                } catch (error) {
                    showError(`Error: ${error.message}`);
                    status.textContent = 'Error during transcription';
                } finally {
                    hideProgress();
                }
            }

            function setupVisualizer(stream) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                const source = audioContext.createMediaStreamSource(stream);
                source.connect(analyser);
                analyser.fftSize = 64;
                
                const bufferLength = analyser.frequencyBinCount;
                dataArray = new Uint8Array(bufferLength);
                
                drawVisualizer();
            }

            function drawVisualizer() {
                animationId = requestAnimationFrame(drawVisualizer);
                analyser.getByteFrequencyData(dataArray);
                
                const width = visualizer.offsetWidth;
                const height = visualizer.offsetHeight;
                const barWidth = (width / dataArray.length) * 2.5;
                let x = 0;
                
                const canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, width, height);
                
                for (let i = 0; i < dataArray.length; i++) {
                    const barHeight = (dataArray[i] / 255) * height;
                    const hue = i * 360 / dataArray.length;
                    
                    ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;
                    ctx.fillRect(x, height - barHeight, barWidth, barHeight);
                    
                    x += barWidth + 1;
                }
                
                visualizer.innerHTML = '';
                visualizer.appendChild(canvas);
            }

            function stopVisualizer() {
                cancelAnimationFrame(animationId);
                visualizer.innerHTML = '';
                visualizer.style.display = 'none';
                
                if (audioContext) {
                    audioContext.close();
                }
            }
        }

        function setupRealtime() {
            const startBtn = document.getElementById('startRealtime');
            const stopBtn = document.getElementById('stopRealtime');
            const status = document.getElementById('realtimeStatus');
            const visualizer = document.getElementById('realtimeVisualizer');
            
            let mediaRecorder;
            let audioContext;
            let analyser;
            let dataArray;
            let animationId;
            let isRecording = false;

            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                document.getElementById('realtimeSection').innerHTML = 
                    '<p>Real-time transcription is not supported in your browser.</p>';
                return;
            }

            startBtn.addEventListener('click', startRealtime);
            stopBtn.addEventListener('click', stopRealtime);

            async function startRealtime() {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                    mediaRecorder = new MediaRecorder(stream);
                    
                    setupRealtimeVisualizer(stream);
                    
                    mediaRecorder.ondataavailable = async (event) => {
                        if (event.data.size > 0 && isRecording) {
                            await processRealtimeChunk(event.data);
                        }
                    };
                    
                    mediaRecorder.start(2000); // Process every 2 seconds
                    startBtn.style.display = 'none';
                    stopBtn.style.display = 'inline-flex';
                    visualizer.style.display = 'block';
                    status.innerHTML = '<span class="real-time-indicator"></span>Live transcription active...';
                    isRecording = true;
                } catch (error) {
                    showError('Error accessing microphone: ' + error.message);
                }
            }

            function stopRealtime() {
                if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                    mediaRecorder.stop();
                    stopBtn.style.display = 'none';
                    startBtn.style.display = 'inline-flex';
                    mediaRecorder.stream.getTracks().forEach(track => track.stop());
                    status.textContent = 'Real-time transcription stopped';
                    isRecording = false;
                    stopRealtimeVisualizer();
                }
            }

            async function processRealtimeChunk(audioBlob) {
                try {
                    const reader = new FileReader();
                    reader.onload = async () => {
                        const audioData = reader.result;
                        
                        const response = await fetch('/transcribe-realtime', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ audio: audioData })
                        });
                        
                        const data = await response.json();
                        
                        if (data.error) {
                            console.error('Real-time error:', data.error);
                            return;
                        }
                        
                        if (data.transcription) {
                            appendToRealtimeResult(data.transcription, data.isFinal);
                        }
                    };
                    
                    reader.readAsDataURL(audioBlob);
                } catch (error) {
                    console.error('Real-time processing error:', error);
                }
            }

            function setupRealtimeVisualizer(stream) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                const source = audioContext.createMediaStreamSource(stream);
                source.connect(analyser);
                analyser.fftSize = 64;
                
                const bufferLength = analyser.frequencyBinCount;
                dataArray = new Uint8Array(bufferLength);
                
                drawRealtimeVisualizer();
            }

            function drawRealtimeVisualizer() {
                animationId = requestAnimationFrame(drawRealtimeVisualizer);
                analyser.getByteFrequencyData(dataArray);
                
                const width = visualizer.offsetWidth;
                const height = visualizer.offsetHeight;
                const barWidth = (width / dataArray.length) * 2.5;
                let x = 0;
                
                const canvas = document.createElement('canvas');
                canvas.width = width;
                canvas.height = height;
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, width, height);
                
                for (let i = 0; i < dataArray.length; i++) {
                    const barHeight = (dataArray[i] / 255) * height;
                    const hue = i * 360 / dataArray.length;
                    
                    ctx.fillStyle = `hsl(${hue}, 100%, 50%)`;
                    ctx.fillRect(x, height - barHeight, barWidth, barHeight);
                    
                    x += barWidth + 1;
                }
                
                visualizer.innerHTML = '';
                visualizer.appendChild(canvas);
            }

            function stopRealtimeVisualizer() {
                cancelAnimationFrame(animationId);
                visualizer.innerHTML = '';
                visualizer.style.display = 'none';
                
                if (audioContext) {
                    audioContext.close();
                }
            }
        }

        function appendToRealtimeResult(text, isFinal) {
            const resultDiv = document.getElementById('result');
            
            if (!resultDiv.querySelector('.realtime-content')) {
                resultDiv.innerHTML = '<div class="realtime-content"></div>';
            }
            
            const realtimeContent = resultDiv.querySelector('.realtime-content');
            
            if (isFinal) {
                realtimeContent.innerHTML += `<p><strong>${text}</strong></p>`;
                currentTranscription += text + ' ';
            } else {
                // Update interim result
                const interimElement = realtimeContent.querySelector('.interim');
                if (interimElement) {
                    interimElement.textContent = text;
                } else {
                    realtimeContent.innerHTML += `<p class="interim" style="color: #666; font-style: italic;">${text}</p>`;
                }
            }
            
            showExportControls();
        }

        function displayResults(data) {
            const resultDiv = document.getElementById('result');
            currentTranscription = data.transcription;
            
            let confidenceClass = 'confidence-low';
            if (data.confidence > 0.8) confidenceClass = 'confidence-high';
            else if (data.confidence > 0.6) confidenceClass = 'confidence-medium';
            
            let html = `
                <div class="transcription-content">
                    <h3><i class="fas fa-file-alt"></i> Transcription Result</h3>
                    ${data.confidence ? `<p><strong>Confidence:</strong> <span class="confidence-indicator ${confidenceClass}">${(data.confidence * 100).toFixed(1)}%</span></p>` : ''}
                    <div class="transcription-text">${data.transcription}</div>
                    ${data.summary ? `<div class="summary-box"><h4><i class="fas fa-lightbulb"></i> AI Summary</h4><p>${data.summary}</p></div>` : ''}
                </div>
            `;
            
            resultDiv.innerHTML = html;
            showExportControls();
            
            // Add copy button
            const copyBtn = document.createElement('button');
            copyBtn.className = 'copy-btn';
            copyBtn.innerHTML = '<i class="fas fa-copy"></i> Copy';
            copyBtn.onclick = () => {
                navigator.clipboard.writeText(data.transcription);
                copyBtn.innerHTML = '<i class="fas fa-check"></i> Copied!';
                setTimeout(() => copyBtn.innerHTML = '<i class="fas fa-copy"></i> Copy', 2000);
            };
            resultDiv.appendChild(copyBtn);
        }

        function showExportControls() {
            document.getElementById('exportControls').style.display = 'flex';
        }

        async function exportTranscription(format) {
            if (!currentTranscription) {
                showError('No transcription to export');
                return;
            }
            
            const filename = prompt('Enter filename (without extension):', 'transcription');
            if (!filename) return;
            
            try {
                const response = await fetch('/export', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        transcription: currentTranscription,
                        format: format,
                        filename: filename
                    })
                });
                
                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `${filename}.${format}`;
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    window.URL.revokeObjectURL(url);
                } else {
                    throw new Error('Export failed');
                }
            } catch (error) {
                showError('Export failed: ' + error.message);
            }
        }

        function addToHistory(transcription, source) {
            const historyItem = {
                id: Date.now(),
                transcription: transcription,
                source: source,
                timestamp: new Date().toISOString(),
                preview: transcription.substring(0, 100) + (transcription.length > 100 ? '...' : '')
            };
            
            transcriptionHistory.unshift(historyItem);
            
            // Keep only last 10 items
            if (transcriptionHistory.length > 10) {
                transcriptionHistory = transcriptionHistory.slice(0, 10);
            }
            
            localStorage.setItem('transcriptionHistory', JSON.stringify(transcriptionHistory));
            loadHistory();
        }

        function loadHistory() {
            const historyList = document.getElementById('historyList');
            const historyPanel = document.getElementById('historyPanel');
            
            if (transcriptionHistory.length === 0) {
                historyPanel.style.display = 'none';
                return;
            }
            
            historyPanel.style.display = 'block';
            historyList.innerHTML = '';
            
            transcriptionHistory.forEach(item => {
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item';
                historyItem.innerHTML = `
                    <div><strong>${item.source}</strong> - ${new Date(item.timestamp).toLocaleString()}</div>
                    <div>${item.preview}</div>
                `;
                historyItem.onclick = () => loadFromHistory(item);
                historyList.appendChild(historyItem);
            });
        }

        function loadFromHistory(item) {
            currentTranscription = item.transcription;
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = `
                <div class="transcription-content">
                    <h3><i class="fas fa-history"></i> Loaded from History</h3>
                    <div class="transcription-text">${item.transcription}</div>
                </div>
            `;
            showExportControls();
            
            // Add copy button
            const copyBtn = document.createElement('button');
            copyBtn.className = 'copy-btn';
            copyBtn.innerHTML = '<i class="fas fa-copy"></i> Copy';
            copyBtn.onclick = () => {
                navigator.clipboard.writeText(item.transcription);
                copyBtn.innerHTML = '<i class="fas fa-check"></i> Copied!';
                setTimeout(() => copyBtn.innerHTML = '<i class="fas fa-copy"></i> Copy', 2000);
            };
            resultDiv.appendChild(copyBtn);
        }

        function showProgress() {
            document.getElementById('progressContainer').style.display = 'block';
            document.querySelector('.loading').style.display = 'block';
            
            // Animate progress bar
            let progress = 0;
            const progressBar = document.getElementById('progressBar');
            const interval = setInterval(() => {
                progress += Math.random() * 15;
                if (progress > 90) progress = 90;
                progressBar.style.width = progress + '%';
            }, 200);
            
            // Store interval to clear later
            window.progressInterval = interval;
        }

        function hideProgress() {
            document.getElementById('progressContainer').style.display = 'none';
            document.querySelector('.loading').style.display = 'none';
            
            // Complete progress bar
            document.getElementById('progressBar').style.width = '100%';
            setTimeout(() => {
                document.getElementById('progressBar').style.width = '0%';
            }, 500);
            
            if (window.progressInterval) {
                clearInterval(window.progressInterval);
            }
        }

        function showError(message) {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = `<div style="color: #dc3545; padding: 1rem; background: #f8d7da; border-radius: 8px; border-left: 4px solid #dc3545;"><i class="fas fa-exclamation-triangle"></i> ${message}</div>`;
        }

        function setupKeyboardShortcuts() {
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 'u':
                            e.preventDefault();
                            document.getElementById('audioFile').click();
                            break;
                        case 'r':
                            e.preventDefault();
                            if (currentMode === 'record') {
                                document.getElementById('startRecording').click();
                            } else if (currentMode === 'realtime') {
                                document.getElementById('startRealtime').click();
                            }
                            break;
                        case 's':
                            e.preventDefault();
                            if (currentMode === 'record') {
                                document.getElementById('stopRecording').click();
                            } else if (currentMode === 'realtime') {
                                document.getElementById('stopRealtime').click();
                            }
                            break;
                        case 'c':
                            e.preventDefault();
                            if (currentTranscription) {
                                navigator.clipboard.writeText(currentTranscription);
                            }
                            break;
                        case 'h':
                            e.preventDefault();
                            const historyPanel = document.getElementById('historyPanel');
                            historyPanel.style.display = historyPanel.style.display === 'none' ? 'block' : 'none';
                            break;
                        case 'd':
                            e.preventDefault();
                            toggleTheme();
                            break;
                    }
                } else if (e.key === '?') {
                    e.preventDefault();
                    const shortcutsHelp = document.getElementById('shortcutsHelp');
                    shortcutsHelp.style.display = shortcutsHelp.style.display === 'none' ? 'block' : 'none';
                }
            });
        }
    </script>
</body>
</html>